// Generated by gencpp from file task2/helloRequest.msg
// DO NOT EDIT!


#ifndef TASK2_MESSAGE_HELLOREQUEST_H
#define TASK2_MESSAGE_HELLOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task2
{
template <class ContainerAllocator>
struct helloRequest_
{
  typedef helloRequest_<ContainerAllocator> Type;

  helloRequest_()
    : stamp_requset()
    , request()  {
    }
  helloRequest_(const ContainerAllocator& _alloc)
    : stamp_requset()
    , request(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_requset_type;
  _stamp_requset_type stamp_requset;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _request_type;
  _request_type request;





  typedef boost::shared_ptr< ::task2::helloRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task2::helloRequest_<ContainerAllocator> const> ConstPtr;

}; // struct helloRequest_

typedef ::task2::helloRequest_<std::allocator<void> > helloRequest;

typedef boost::shared_ptr< ::task2::helloRequest > helloRequestPtr;
typedef boost::shared_ptr< ::task2::helloRequest const> helloRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task2::helloRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task2::helloRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task2::helloRequest_<ContainerAllocator1> & lhs, const ::task2::helloRequest_<ContainerAllocator2> & rhs)
{
  return lhs.stamp_requset == rhs.stamp_requset &&
    lhs.request == rhs.request;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task2::helloRequest_<ContainerAllocator1> & lhs, const ::task2::helloRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task2::helloRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task2::helloRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task2::helloRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task2::helloRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task2::helloRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task2::helloRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task2::helloRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f323de8e59ddbf8c268a99e3929710a3";
  }

  static const char* value(const ::task2::helloRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf323de8e59ddbf8cULL;
  static const uint64_t static_value2 = 0x268a99e3929710a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::task2::helloRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task2/helloRequest";
  }

  static const char* value(const ::task2::helloRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task2::helloRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp_requset\n"
"string request\n"
;
  }

  static const char* value(const ::task2::helloRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task2::helloRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp_requset);
      stream.next(m.request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct helloRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task2::helloRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task2::helloRequest_<ContainerAllocator>& v)
  {
    s << indent << "stamp_requset: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp_requset);
    s << indent << "request: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK2_MESSAGE_HELLOREQUEST_H
