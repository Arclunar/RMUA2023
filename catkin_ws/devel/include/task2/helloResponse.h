// Generated by gencpp from file task2/helloResponse.msg
// DO NOT EDIT!


#ifndef TASK2_MESSAGE_HELLORESPONSE_H
#define TASK2_MESSAGE_HELLORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task2
{
template <class ContainerAllocator>
struct helloResponse_
{
  typedef helloResponse_<ContainerAllocator> Type;

  helloResponse_()
    : stamp_response()
    , response()  {
    }
  helloResponse_(const ContainerAllocator& _alloc)
    : stamp_response()
    , response(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_response_type;
  _stamp_response_type stamp_response;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _response_type;
  _response_type response;





  typedef boost::shared_ptr< ::task2::helloResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task2::helloResponse_<ContainerAllocator> const> ConstPtr;

}; // struct helloResponse_

typedef ::task2::helloResponse_<std::allocator<void> > helloResponse;

typedef boost::shared_ptr< ::task2::helloResponse > helloResponsePtr;
typedef boost::shared_ptr< ::task2::helloResponse const> helloResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task2::helloResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task2::helloResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task2::helloResponse_<ContainerAllocator1> & lhs, const ::task2::helloResponse_<ContainerAllocator2> & rhs)
{
  return lhs.stamp_response == rhs.stamp_response &&
    lhs.response == rhs.response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task2::helloResponse_<ContainerAllocator1> & lhs, const ::task2::helloResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task2::helloResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task2::helloResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task2::helloResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task2::helloResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task2::helloResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task2::helloResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task2::helloResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f351e82a09ba72557d1bb2ddee72a89f";
  }

  static const char* value(const ::task2::helloResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf351e82a09ba7255ULL;
  static const uint64_t static_value2 = 0x7d1bb2ddee72a89fULL;
};

template<class ContainerAllocator>
struct DataType< ::task2::helloResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task2/helloResponse";
  }

  static const char* value(const ::task2::helloResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task2::helloResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp_response\n"
"string response\n"
;
  }

  static const char* value(const ::task2::helloResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task2::helloResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp_response);
      stream.next(m.response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct helloResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task2::helloResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task2::helloResponse_<ContainerAllocator>& v)
  {
    s << indent << "stamp_response: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp_response);
    s << indent << "response: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.response);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK2_MESSAGE_HELLORESPONSE_H
